# -*- coding: utf-8 -*-
"""
Created on Wed Dec  7 19:35:46 2022
Part A: House Hunting
In Part A, we are going to determine how long it will take you to save enough
money to make the down payment given the following assumptions:
1. Call the cost of your dream home total_cost.
2. Call the portion of the cost needed for a down payment portion_down_payment. 
For simplicity, assume that portion_down_payment = 0.25 (25%).
3. Call the amount that you have saved thus far current_savings. You start with 
a current savings of $0. 
4. Assume that you invest your current savings wisely, with an annual return 
of r (in other words, at the end of each month, you receive an additional 
current_savings*r/12 funds to put into your savings â€“ the 12 is because 
r is an annual rate). Assume that your investments earn a return of 
r = 0.04 (4%).
5. Assume your annual salary is annual_salary.
6. Assume you are going to dedicate a certain amount of your salary each 
month to saving for the down payment. Call that portion_saved. This variable 
should be in decimal form (i.e. 0.1 for 10%). 
7. At the end of each month, your savings will be increased by the return on 
your investment, plus a percentage of your monthly salary (annual salary / 12).
Write a program to calculate how many months it will take you to save up enough
money for a down payment. You will want your main variables to be floats, 
so you should cast user inputs to floats.  

Your program should ask the user to enter the following variables:
1. The starting annual salary (annual_salary)
2. The portion of salary to be saved (portion_saved)
3. The cost of your dream home (total_cost)

@author: User
"""



#Calculate monthly investment returns
def invest_returns(current_savings):
    invest_returns = current_savings*r/12
    #print("Current Savings: ", current_savings)
    return invest_returns

#Calculate monthly portion saved 
def monthly_savings(annual_salary, portion_saved):
    additional_savings = annual_salary / 12 * portion_saved
    #print("Additional Savings: ", additional_savings)
    return additional_savings

def main(annual_salary, portion_saved, current_savings):
    months = 0
    while (current_savings < down_payment):
        current_savings += monthly_savings(annual_salary, portion_saved) + invest_returns(current_savings)
        months = months+1
    print("Required months: ", months)


#user inputs
#1. The starting annual salary (annual_salary)
annual_salary = float(input("Starting annual salary: "))

#2. The portion of salary to be saved (portion_saved)
portion_saved = float(input("Portion of salary to be saved as decimal: "))

#3. The cost of your dream home (total_cost)
total_cost = float(input("Cost of dream home: "))

#init variables
portion_down_payment = 0.25
current_savings = 0
r = 0.04 #annual return
down_payment = total_cost * portion_down_payment

main(annual_salary, portion_saved, current_savings)
