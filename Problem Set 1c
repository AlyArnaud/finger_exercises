# -*- coding: utf-8 -*-
"""
Created on Wed Dec  7 19:35:46 2022

In ps1c.py, write a program to calculate the best savings rate, as a function 
of your starting salary. You should use bisection search to help you do this 
efficiently. You should keep track of the number of steps it takes your 
bisections search to finish. You should be able to reuse some of the code you 
wrote for part B in this problem. Because we are searching for a value that is 
in principle a float, we are going to limit ourselves to two decimals of 
accuracy (i.e., we may want to save at 7.04% ­­ or 0.0704 in decimal – but we 
are not going to worry about the difference between 7.041% and 7.039%).  This 
means we can search for an integer between 0 and 10000 (using integer division), 
and then convert it to a decimal percentage (using float division) to use when 
we are calculating the current_savings after 36 months. By using this range, 
there are only a finite number of numbers that we are searching over, as 
opposed to the infinite number of decimals between 0 and 1. This range will 
help prevent infinite loops. The reason we use 0 to 10000 is to account for 
two additional decimal places in the range 0% to 100%. Your code
should print out a decimal (e.g. 0.0704 for 7.04%).

To simplify things, assume:

1. Your semi­annual raise is .07 (7%)
2. Your investments have an annual return of 0.04 (4%)  
3. The down payment is 0.25 (25%) of the cost of the house 
4. The cost of the house that you are saving for is $1M.

You are now going to try to find the best rate of savings to achieve a down 
payment on a $1M house in 36 months. Since hitting this exactly is a challenge,
we simply want your savings to be within $100 of the required down payment. 


@author: User
"""



#Calculate monthly investment returns
def invest_returns(current_savings):
    invest_returns = current_savings*r/12
    #print("Current Savings: ", current_savings)
    return invest_returns

#Calculate monthly portion saved 
def monthly_savings(annual_salary, portion_saved):
    additional_savings = annual_salary / 12 * portion_saved
    #print("Additional Savings: ", additional_savings)
    return additional_savings

def salary_raise(annual_salary, semi_annual_raise):
    annual_salary = annual_salary * (1+semi_annual_raise)
    return annual_salary


#Calculate best savings rate as function of salary, return portion_saved
def amount_saved(annual_salary, portion_saved):
    percent_saved = float(portion_saved)/10000
    current_savings = 0
    months = 0
    for x in range(36):
        #print("Current savings: ", current_savings)
        current_savings += monthly_savings(annual_salary, percent_saved) + invest_returns(current_savings)
        months = months+1
        if(months % 6 == 0):
            annual_salary = salary_raise(annual_salary, semi_annual_raise)
    return current_savings

def check_bounds(annual_salary):
    if(amount_saved(annual_salary, 10000) < down_payment):
        print("Income too low")
        return True

def main(annual_salary):
    if(check_bounds(annual_salary) == True):
        return
    epsilon = 100
    num_guesses = 0
    low = 0
    high = 10000
    ans = (high+low)/2
    while abs(amount_saved(annual_salary, ans) - down_payment) >= epsilon: 
        num_guesses +=1
        if amount_saved(annual_salary, ans) < down_payment:
            low = ans
        else:
            high = ans
        ans = (high + low)/2
        
    print("Number of Guesses: ", num_guesses)
    formatted_rate = float(ans)/10000
    print("Recommended saving rate: ", formatted_rate)
    print("Down payment: ", amount_saved(annual_salary, ans))

#user inputs
#1. The starting annual salary (annual_salary)
annual_salary = float(input("Starting annual salary: "))


#init variables
portion_down_payment = 0.25
r = 0.04 #annual return
semi_annual_raise = 0.07
total_cost = 1000000
epsilon = 100 #goal of being within +/-$100 of down payment
down_payment = total_cost * portion_down_payment



main(annual_salary)
